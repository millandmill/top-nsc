<?php

	class mol_invoice extends CI_Model
	{
		function __construct()
	    {
	        parent::__construct();
	        $this->load->database();
	    }

	    public function getCustomer($id)
	    {
	    	if(isset($id) && trim($id != '')){
	    		$this->db->where('user_id', $id);
	    	}
	    	$this->db->select('customer_id, customer_name, customer_address, customer_district, customer_county, customer_road, customer_building, customer_floor, 
	    		customer_province, customer_zip, customer_tel, customer_fax, customer_email, customer_tax_code');
	    	$this->db->from('customer');
	    	$query = $this->db->get();
			$rows = $query->num_rows();
			if($rows > 0){
				for($i=0; $i < $rows; $i++){
					$data[$i] = $query->row_array($i);
				}
			}else{
				$data = null;
			}
			return $data;
	    }

	    public function getRecord_all($quotation) {
	    	if(isset($quotation['user_id']) && trim($quotation['user_id'] != '')){
	    		$this->db->where('user_id', $quotation['user_id']);
	    	}
	        return $this->db->count_all("invoice");
	    }

	    public function getQuotation($id, $end, $start)
	    {
	    	if(isset($id['user_id']) && trim($id['user_id'] != '')){
	    		$this->db->where('quotation.user_id', $id['user_id']);
	    	}
	    	if(isset($id['user_id']) && trim($id['user_id'] != '')){
	    		$this->db->where('invoice.user_id', $id['user_id']);
	    	}
	    	if(isset($end) && trim($end != '')){
	    		$this->db->limit($end, $start);
	    	}
	    	$this->db->select('quotation_id, quotation.quotation_paper, ,quotation_text, quotation_number, quotation_date, quotation_note, quotation_status, company_name,
	    		company_address_all, company_email, company_tel, company_fax, company_tax_code, product_option, product_company_id, product_name, product_price, product_amount,
	    		product_discount, product_total, product_total_real, product_grand_total, product_vat, quotation.user_id, invoice.invoice_id, invoice.invoice_paper, invoice.invoice_text, invoice.invoice_number, 
	    		invoice.invoice_date, invoice.invoice_status, quotation.customer_id, customer.customer_name');
	    	$this->db->join('invoice', 'quotation.quotation_paper = invoice.quotation_paper');
	    	$this->db->join('customer', 'customer.customer_id = quotation.customer_id');
	    	$this->db->group_by("quotation_paper");
	    	$this->db->from('quotation');
	    	$query = $this->db->get();
			$rows = $query->num_rows();
			if($rows > 0){
				for($i=0; $i < $rows; $i++){
					$data[$i] = $query->row_array($i);
				}
			}else{
				$data = null;
			}
			return $data;
	    }

	    public function getQuotation2($id)
	    {
	    	if(isset($id['user_id']) && trim($id['user_id'] != '')){
	    		$this->db->where('quotation.user_id', $id['user_id']);
	    	}
	    	if(isset($id['user_id']) && trim($id['user_id'] != '')){
	    		$this->db->where('invoice.user_id', $id['user_id']);
	    	}
	    	if(isset($id['id']) && trim($id['id'] != '')){
	    		$this->db->where('invoice.invoice_id', $id['id']);
	    	}
	    	$this->db->select('quotation_id, quotation.quotation_paper, ,quotation_text, quotation_number, quotation_date, quotation_note, quotation_status, write_text_principle, write_text,
	    		company_name, company_address_all, company_email, company_tel, company_fax, company_tax_code, product_option, product_company_id, product_name, product_price, product_amount,
	    		product_discount, product_total, product_total_real, product_grand_total, product_vat, quotation.user_id, invoice.invoice_id, invoice.invoice_text, invoice.invoice_number, 
	    		invoice.invoice_date, invoice.invoice_status, quotation.customer_id, customer.customer_name');
	    	$this->db->join('invoice', 'quotation.quotation_paper = invoice.quotation_paper');
	    	$this->db->join('customer', 'customer.customer_id = quotation.customer_id');
	    	$this->db->group_by("quotation_paper");
	    	$this->db->from('quotation');
	    	$query = $this->db->get();
			$rows = $query->num_rows();
			if($rows > 0){
				for($i=0; $i < $rows; $i++){
					$data[$i] = $query->row_array($i);
				}
			}else{
				$data = null;
			}
			return $data;
	    }

	    public function chkInvoice($id){
	    	if(isset($id['user_id']) && trim($id['user_id'] != '')){
	    		$this->db->where('user_id', $id['user_id']);
	    	}
	    	if(isset($id['billingnote_paper']) && trim($id['billingnote_paper'] != '')){
	    		$this->db->where('billingnote_paper', $id['billingnote_paper']);
	    	}
	    	$this->db->select('invoice_id');
	    	$this->db->from('invoice');
	    	$query = $this->db->get();
			$rows = $query->num_rows();
			if($rows > 0){
				for($i=0; $i < $rows; $i++){
					$data[$i] = $query->row_array($i);
				}
			}else{
				$data = null;
			}
			return $data;
	    }

	    public function chkQuotation($arr)
	    {
	    	if(isset($arr['user_id']) && trim($arr['user_id'] != '')){
	    		$this->db->where('user_id', $arr['user_id']);
	    	}
	    	if(isset($arr['billingnote_paper']) && trim($arr['billingnote_paper'] != '')){
	    		$this->db->where('billingnote_paper', $arr['billingnote_paper']);
	    	}
	    	$this->db->update('billingnote', array('billingnote_status' => 'ออกใบกำกับภาษีแล้ว'));
	    }

	    public function insertInvoice($data = array())
	    {
	    	$this->db->insert('invoice', $data);
	    }

	    public function chkInvoice_paper($id)
	    {
	    	if(isset($id['user_id']) && trim($id['user_id'] != '')){
	    		$this->db->where('billingnote.user_id', $id['user_id']);
	    	}
	    	if(isset($id['id']) && trim($id['id'] != '')){
	    		$this->db->where('invoice.invoice_id', $id['id']);
	    	}
	    	$this->db->select('invoice_paper, invoice_text, invoice_number, invoice_date, billingnote.billingnote_text, billingnote.billingnote_number');
	    	$this->db->join('billingnote', 'billingnote.billingnote_paper = invoice.billingnote_paper');
	    	$this->db->from('invoice');
	    	$this->db->order_by('invoice_paper', 'asc');
	    	$query = $this->db->get();
			$rows = $query->num_rows();
			if($rows > 0){
				for($i=0; $i < $rows; $i++){
					$data[$i] = $query->row_array($i);
				}
			}else{
				$data = null;
			}
			return $data;
	    }

	    public function updateInvoice($data = array(), $id)
	    {
	    	if(isset($id['user_id']) && trim($id['user_id'] != '')){
	    		$this->db->where('user_id', $id['user_id']);
	    	}
	    	if(isset($id['paper']) && trim($id['paper'] != '')){
	    		$this->db->where('quotation_paper', $id['paper']);
	    	}
	    	$this->db->update('invoice', $data);
	    }

	    public function chageReceiptStatus($data = array())
	    {
	    	if(isset($data['user_id']) && trim($data['user_id'] != '')){
	    		$this->db->where('user_id', $data['user_id']);
	    	}
	    	if(isset($data['pri_id']) && trim($data['pri_id'] != '')){
	    		$this->db->where('invoice_id', $data['pri_id']);
	    	}
	    	$this->db->update('invoice', array('invoice_status' => 'ยกเลิก'));
	    }

	    public function changeBeforeStatus($data = array())
	    {
	    	if(isset($data['user_id']) && trim($data['user_id'] != '')){
	    		$this->db->where('user_id', $data['user_id']);
	    	}
	    	if(isset($data['quotation_id']) && trim($data['quotation_id'] != '')){
	    		$this->db->where('quotation_paper', $data['quotation_id']);
	    	}
	    	$this->db->update('billingnote', array('billingnote_status' => 'รอใบเสร็จ'));
	    }

	    public function updateStatus($data = array())
	    {
	    	if(isset($data['user_id']) && trim($data['user_id'] != '')){
	    		$this->db->where('user_id', $data['user_id']);
	    	}
	    	if(isset($data['billingnote_paper']) && trim($data['billingnote_paper'] != '')){
	    		$this->db->where('billingnote_paper', $data['billingnote_paper']);
	    	}
	    	$this->db->update('invoice', array('invoice_status' => 'เสร็จสิ้น'));
	    }
            
            public function getInvoiceReport($id) {
                //get data at same user_id and each invoice_paper
                if(isset($id['user_id']) && trim($id['user_id']) != '') {
                    $this->db->where('invoice.user_id', $id['user_id']);
                }

                if(isset($id['invoice_paper']) && trim($id['invoice_paper']) != '') {
                    $this->db->where('invoice_paper', $id['invoice_paper']);
                }

                $this->db->select('invoice_text, invoice_number, invoice_date, billingnote_text, billingnote_number, product_name, product_amount, product_price, product_discount, quotation.user_id, '
                        . ' product_total, write_text, product_total_real, product_vat, condition_pay, pay_day, '
                        . ' product_option, product_grand_total, company_address_all, company.company_name, '
                        . ' company.company_tel, company.company_email, company.company_fax, company.company_tax_code, company.company_logo, customer_name, customer_address, '
                        . ' customer_building, customer_floor, customer_road, customer_district, customer_county, customer_province, customer_zip, customer_tax_code, customer_tel, customer_email ');
                $this->db->from('invoice');
                $this->db->join('quotation', 'invoice.quotation_paper = quotation.quotation_paper');
                $this->db->join('company', 'quotation.user_id = company.user_id');
                $this->db->join('billingnote', 'invoice.billingnote_paper = billingnote.billingnote_paper');
                $this->db->join('customer', 'quotation.customer_id = customer.customer_id');
                $query = $this->db->get();
                    $rows = $query->num_rows();
                    if($rows > 0) {
                        for($i=0; $i < $rows; $i++) {
                            $data[$i] = $query->row_array($i);
                        }
                    }else {
                        $data = null;
                    }
                    return $data;
                    
                    print_r($data);die();
            }

	}
?>